# ===========================================================================
# (c) Copyright IBM Corp. 2017 All Rights Reserved
# ===========================================================================
# 
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# 
# ===========================================================================

# spec.gmk is generated by configure and contains many of the variable definitions used in this makefile
ifeq ($(wildcard $(SPEC)),)
  $(error OpenJ9.gmk needs SPEC set to a proper spec.gmk)
endif
include $(SPEC)

ifeq (,$(BUILD_ID))
  BUILD_ID := 000000
endif

OPENJ9_SHA    := $(shell git -C $(OPENJ9_TOPDIR)    rev-parse --short HEAD)
OPENJ9OMR_SHA := $(shell git -C $(OPENJ9OMR_TOPDIR) rev-parse --short HEAD)
ifeq (,$(OPENJ9_SHA))
  $(error Could not determine OpenJ9 SHA)
endif
ifeq (,$(OPENJ9OMR_SHA))
  $(error Could not determine OMR SHA)
endif

OPENJ9_ALT_SHARED_LIBRARIES := \
  j9vm_b156/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX) \
  jcl/cl_se9/$(LIBRARY_PREFIX)jclse9_29$(SHARED_LIBRARY_SUFFIX) \
  #
OPENJ9_SHARED_LIBRARIES := $(filter-out $(notdir $(OPENJ9_ALT_SHARED_LIBRARIES)), $(notdir $(wildcard $(OUTPUT_ROOT)/vm/$(LIBRARY_PREFIX)*$(SHARED_LIBRARY_SUFFIX))))
OPENJ9_PROPERTY_FILES := $(notdir $(wildcard $(OUTPUT_ROOT)/vm/java*.properties))
OPENJ9_MISC_FILES := \
  J9TraceFormat.dat \
  OMRTraceFormat.dat \
  options.default \
  #
OPENJ9_NOTICE_FILES := openj9-notices.html
OPENJ9_REDIRECTOR := redirector/$(LIBRARY_PREFIX)jvm_b156$(SHARED_LIBRARY_SUFFIX)

# we should try using the makeflags as defined by openjdk (issue 59)
NUMCPU := $(shell grep -c ^processor /proc/cpuinfo)
#$(info NUMCPU = $(NUMCPU))
override MAKEFLAGS := -j $(NUMCPU)

# honour the --disable-warnings-as-errors configure parameter during compilation of OMR
ifeq (false,$(WARNINGS_AS_ERRORS))
  OMR_EXTRA_CONFIGURE_ARGS := "--disable-warnings-as-errors OMR_TREAT_WARNINGS_AS_ERRORS=0"
else
  OMR_EXTRA_CONFIGURE_ARGS := "--enable-warnings-as-errors OMR_TREAT_WARNINGS_AS_ERRORS=1"
endif

.PHONY : \
	build-j9 \
	clean-j9 \
	clean-j9-dist \
	generate-j9jcl-sources \
	run-preprocessors-j9 \
	stage-j9 \
	stage-openj9-tools \
	build-openj9-tools \
	#

# generated_target_rules
# ----------------------
# param 1 = The jdk/jre directory name
# param 2 = The jdk/jre directory to add openj9 content
define generated_target_rules
.PHONY : stage_openj9_$1
$(foreach file,$(OPENJ9_SHARED_LIBRARIES),$(eval $(call openj9_copy_file,$2/lib/compressedrefs/$(file),$(OUTPUT_ROOT)/vm/$(file))))
$(foreach file,$(OPENJ9_ALT_SHARED_LIBRARIES),$(eval $(call openj9_copy_file,$2/lib/compressedrefs/$(notdir $(file)),$(OUTPUT_ROOT)/vm/$(file))))
$(foreach file,$(OPENJ9_MISC_FILES) $(OPENJ9_PROPERTY_FILES),$(eval $(call openj9_copy_file,$2/lib/$(file),$(OUTPUT_ROOT)/vm/$(file))))
$(foreach file,$(OPENJ9_NOTICE_FILES),$(eval $(call openj9_copy_file,$2/$(file),$(SRC_ROOT)/$(file))))
$(foreach file,$(OPENJ9_REDIRECTOR),$(eval $(call openj9_copy_file,$2/lib/j9vm/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX),$(OUTPUT_ROOT)/vm/$(file))))
stage_openj9_shared_libraries_$1 := $(addprefix $2/lib/compressedrefs/,$(OPENJ9_SHARED_LIBRARIES))
stage_openj9_alt_shared_libraries_$1 := $(addprefix $2/lib/compressedrefs/,$(notdir $(OPENJ9_ALT_SHARED_LIBRARIES)))
stage_openj9_misc_files_$1 := $(addprefix $2/lib/,$(OPENJ9_MISC_FILES))
stage_openj9_notice_files_$1 := $(addprefix $2/,$(OPENJ9_NOTICE_FILES))
stage_openj9_property_files_$1 := $(addprefix $2/lib/,$(OPENJ9_PROPERTY_FILES))
stage_openj9_redirector_$1 := $2/lib/j9vm/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX)
stage_openj9_$1 : \
	$$(stage_openj9_shared_libraries_$1) \
	$$(stage_openj9_alt_shared_libraries_$1) \
	$$(stage_openj9_misc_files_$1) \
	$$(stage_openj9_notice_files_$1) \
	$$(stage_openj9_redirector_$1) \
	$$(stage_openj9_property_files_$1)
endef

# openj9_copy_file
# ----------------
# param 1 = The target file to create or update.
# parma 2 = The source file to copy.
define openj9_copy_file
$1 : $2
	@$(MKDIR) -p $$(@D)
	@$(CP) $$< $$@
endef

# openj9_copy_tree
# ----------------
# param 1 = The target directory to create or update.
# param 2 = The source directory to copy.
define openj9_copy_tree
  $(call openj9_copy_tree_impl,$(strip $(abspath $1)),$(strip $(abspath $2)))
endef

OPENJ9_MARKER_FILE := .up-to-date

define openj9_copy_tree_impl
  @$(MKDIR) -p $1
  @$(TAR) --create --directory=$2 $(if $(wildcard $1/$(OPENJ9_MARKER_FILE)),--newer=$1/$(OPENJ9_MARKER_FILE)) --exclude-vcs . | $(TAR) --extract --directory=$1 --touch
  @$(TOUCH) $1/$(OPENJ9_MARKER_FILE)
endef

$(eval $(call generated_target_rules,build_jdk,$(BUILD_JDK)))
$(eval $(call generated_target_rules,jdk_image,$(JDK_IMAGE_DIR)))
$(eval $(call generated_target_rules,jre_image,$(JRE_IMAGE_DIR)))

# Comments for stage-j9
# Currently there is a staged location where j9 is built.  This is due to a number of reasons:
# 1. make currently leaves output file in current directory
# 2. generated source and header files
# 3. repo layout compared to source.zip layout
# See issue 49 for more information and actions to correct this action.

# Adjust features based on our configuration.
ifeq (true,$(OPENJ9_ENABLE_CUDA))
  FEATURE_SED_SCRIPT := -e '/opt_cuda/s/false/true/g'
else
  FEATURE_SED_SCRIPT := -e '/opt_cuda/s/true/false/g'
endif

# As DDR is not enabled we use sed to filter .spec files.
SPEC_SED_SCRIPT := -e '/module_ddr/s/true/false/g'

# openj9_stage_buildspec_file
# ---------------------------
# param 1 = The simple name of the file to copy.
define openj9_stage_buildspec_file
$(OUTPUT_ROOT)/vm/buildspecs/$1 : $(OPENJ9_TOPDIR)/buildspecs/$1
	@$(MKDIR) -p $$(@D)
  ifeq ($(suffix $1),.feature)
	@$(SED) $(FEATURE_SED_SCRIPT) < $$< > $$@
  else ifeq ($(suffix $1),.spec)
	@$(SED) $(SPEC_SED_SCRIPT) < $$< > $$@
  else
	@$(CP) $$< $$@
  endif
endef

BUILDSPEC_FILES := $(notdir $(wildcard $(OPENJ9_TOPDIR)/buildspecs/*))

$(foreach file,$(BUILDSPEC_FILES),$(eval $(call openj9_stage_buildspec_file,$(file))))

OPENJ9_STAGED_BUILDSPECS := \
  $(addprefix $(OUTPUT_ROOT)/vm/buildspecs/,$(BUILDSPEC_FILES))

stage-openj9-tools :
	@$(ECHO) Staging OpenJ9 sourcetools in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm/sourcetools,$(OPENJ9_TOPDIR)/sourcetools)

build-openj9-tools : stage-openj9-tools
	@$(ECHO) Building OpenJ9 tools
	($(MAKE) $(MAKEFLAGS) -C $(OUTPUT_ROOT)/vm/sourcetools -f buildj9tools.mk \
		JAVA_HOME=$(BOOT_JDK) lib/jpp.jar \
	)

stage-j9 : \
		$(OPENJ9_STAGED_BUILDSPECS) \
		stage-openj9-tools
	@$(ECHO) Staging OpenJ9 debugtools in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm/debugtools,$(OPENJ9_TOPDIR)/debugtools)

	@$(ECHO) Staging OpenJ9 jcl in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm/jcl,$(OPENJ9_TOPDIR)/jcl)

	@$(ECHO) Staging OpenJ9 runtime in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm,$(OPENJ9_TOPDIR)/runtime)

	@$(ECHO) Staging OpenJ9 OMR in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm/omr,$(OPENJ9OMR_TOPDIR))

# Only update version files when the SHAs change.
$(OUTPUT_ROOT)/vm/tr.source/jit.version : $(call DependOnVariable, OPENJ9_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define TR_LEVEL_NAME "$(OPENJ9_SHA)"' > $@

$(OUTPUT_ROOT)/vm/omr/OMR_VERSION_STRING : $(call DependOnVariable, OPENJ9OMR_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define OMR_VERSION_STRING "$(OPENJ9OMR_SHA)"' > $@

run-preprocessors-j9 : stage-j9 $(OUTPUT_ROOT)/vm/tr.source/jit.version $(OUTPUT_ROOT)/vm/omr/OMR_VERSION_STRING
	@$(ECHO) Running OpenJ9 preprocessors with OPENJ9_BUILDSPEC: $(OPENJ9_BUILDSPEC)
	(export BOOT_JDK=$(BOOT_JDK) \
		&& cd $(OUTPUT_ROOT)/vm \
		&& $(MAKE) $(MAKEFLAGS) -f buildtools.mk \
			BUILD_ID=$(BUILD_ID) \
			FREEMARKER_JAR=$(FREEMARKER_JAR) \
			J9VM_SHA=$(OPENJ9_SHA) \
			JAVA_HOME=$(BOOT_JDK) \
			OMR_DIR=$(OUTPUT_ROOT)/vm/omr \
			SPEC=$(OPENJ9_BUILDSPEC) \
			EXTRA_CONFIGURE_ARGS=$(OMR_EXTRA_CONFIGURE_ARGS) \
			UMA_OPTIONS_EXTRA="-buildDate $(shell date +'%Y%m%d')" \
			tools \
	)
	# for xLinux there is a hardcoded reference in mkconstants.mk for gcc-4.6.  Openjdk minimum gcc is 4.8.2
	@$(SED) -i -e 's/gcc-4.6/gcc/g' $(OUTPUT_ROOT)/vm/makelib/mkconstants.mk

build-j9 : run-preprocessors-j9
	@$(ECHO) Compiling OpenJ9 in $(OUTPUT_ROOT)/vm
	(export OMR_DIR=$(OUTPUT_ROOT)/vm/omr OPENJ9_BUILD=true && cd $(OUTPUT_ROOT)/vm && $(MAKE) $(MAKEFLAGS) all)
	@$(ECHO) OpenJ9 compile complete
	# jvm and jsig are required for compiling other java.base support natives
	@$(MKDIR) -p $(OUTPUT_ROOT)/support/modules_libs/java.base/server/
	@$(CP) -p $(OUTPUT_ROOT)/vm/j9vm_b156/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX) $(OUTPUT_ROOT)/support/modules_libs/java.base/server/
	@$(ECHO) Creating support/modules_libs/java.base/server/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX) from J9 sources
	@$(CP) -p $(OUTPUT_ROOT)/vm/$(LIBRARY_PREFIX)jsig$(SHARED_LIBRARY_SUFFIX) $(OUTPUT_ROOT)/support/modules_libs/java.base/
	@$(ECHO) Creating support/modules_libs/java.base/$(LIBRARY_PREFIX)jsig$(SHARED_LIBRARY_SUFFIX) from J9 sources

J9JCL_SOURCES_DONEFILE := $(MAKESUPPORT_OUTPUTDIR)/j9jcl_sources.done

recur_wildcard = $(foreach dir,$(wildcard $1/*),$(call recur_wildcard,$(dir),$2) $(filter $(subst *,%,$2),$(dir)))
AllJclSource   = $(call recur_wildcard,$(OPENJ9_TOPDIR)/jcl/src,*.java)

$(J9JCL_SOURCES_DONEFILE) : $(AllJclSource)
	@$(ECHO) Generating J9JCL sources
	@$(MKDIR) -p $(SUPPORT_OUTPUTDIR)/j9jcl_sources
	@$(BOOT_JDK)/bin/java \
		-cp $(OUTPUT_ROOT)/vm/sourcetools/lib/jpp.jar \
		-Dfile.encoding=US-ASCII \
		com.ibm.jpp.commandline.CommandlineBuilder \
			-verdict \
			-baseDir $(OPENJ9_TOPDIR)/ \
			-config SIDECAR19-SE-B175 \
			-srcRoot jcl/ \
			-xml jpp_configuration.xml \
			-dest $(SUPPORT_OUTPUTDIR)/j9jcl_sources \
			-macro:define "com.ibm.oti.vm.library.version=29" \
			-tag:define "PLATFORM-$(OPENJ9_PLATFORM_CODE)"
	@$(MKDIR) -p $(@D)
	@$(TOUCH) $@

generate-j9jcl-sources : $(J9JCL_SOURCES_DONEFILE)

clean-j9 : clean-openj9-thirdparty-binaries
	(cd $(OUTPUT_ROOT)/vm && $(MAKE) clean)

clean-j9-dist : clean-openj9-thirdparty-binaries
	$(RM) -fdr $(OUTPUT_ROOT)/vm

clean-openj9-thirdparty-binaries :
	$(RM) -f $(OPENJ9_STAGED_THIRDPARTY_BINARIES) $(patsubst %.jar,%.tar.gz,$(OPENJ9_STAGED_THIRDPARTY_BINARIES))
