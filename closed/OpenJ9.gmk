# ===========================================================================
# (c) Copyright IBM Corp. 2017, 2018 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

# spec.gmk is generated by configure and contains many of the variable definitions used in this makefile
ifeq (,$(wildcard $(SPEC)))
  $(error OpenJ9.gmk needs SPEC set to a proper spec.gmk)
endif
include $(SPEC)
include $(SRC_ROOT)/make/common/MakeBase.gmk

ifeq (,$(BUILD_ID))
  BUILD_ID := 000000
endif

OPENJ9_SHA := $(shell git -C $(OPENJ9_TOPDIR) rev-parse --short HEAD)
ifeq (,$(OPENJ9_SHA))
  $(error Could not determine OpenJ9 SHA)
endif

# Find OpenJ9 tag associated with current commit specified by OPENJ9_SHA
# (suppressing stderr in case there is no such tag).
OPENJ9_TAG := $(shell git -C $(OPENJ9_TOPDIR) describe --exact-match $(OPENJ9_SHA) 2>/dev/null)
ifeq (,$(OPENJ9_TAG))
  OPENJ9_BRANCH := $(shell git -C $(OPENJ9_TOPDIR) rev-parse --abbrev-ref HEAD)
  ifeq (,$(OPENJ9_BRANCH))
    $(error Could not determine OpenJ9 Branch)
  endif
  OPENJ9_VERSION_STRING := $(OPENJ9_BRANCH)-$(OPENJ9_SHA)
else
  OPENJ9_VERSION_STRING := $(OPENJ9_TAG)
endif

OPENJ9OMR_SHA := $(shell git -C $(OPENJ9OMR_TOPDIR) rev-parse --short HEAD)
ifeq (,$(OPENJ9OMR_SHA))
  $(error Could not determine OMR SHA)
endif

OPENJ9_ALT_SHARED_LIBRARIES := \
	jcl/cl_se9/$(LIBRARY_PREFIX)jclse9_29$(SHARED_LIBRARY_SUFFIX) \
	j9vm_b156/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX) \
	#

OPENJ9_SHARED_CLASSES_LIBRARIES := \
	$(LIBRARY_PREFIX)j9shr29$(SHARED_LIBRARY_SUFFIX) \
	#

OPENJ9_JAVA_BASE_LIBRARIES := \
	$(LIBRARY_PREFIX)cuda4j29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)ffi29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9dmp29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9gc29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9gcchk29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9hookable29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9jit29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9jnichk29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9jvmti29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9prt29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9thr29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9trc29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9vm29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9vmchk29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9vrb29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)j9zlib29$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)jsig$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)omrsig$(SHARED_LIBRARY_SUFFIX) \
	$(OPENJ9_ALT_SHARED_LIBRARIES) \
	#

OPENJ9_MANAGEMENT_LIBRARIES := \
	$(LIBRARY_PREFIX)management$(SHARED_LIBRARY_SUFFIX) \
	$(LIBRARY_PREFIX)management_ext$(SHARED_LIBRARY_SUFFIX) \
	#

OPENJ9_ALL_LIBRARIES := \
	$(wildcard $(OUTPUT_ROOT)/vm/$(LIBRARY_PREFIX)*$(SHARED_LIBRARY_SUFFIX))

OPENJ9_BUILD_LIBRARIES := \
	$(filter-out \
		$(notdir $(OPENJ9_ALT_SHARED_LIBRARIES)), \
		$(notdir $(OPENJ9_ALL_LIBRARIES)))

OPENJ9_SHARED_LIBRARIES := \
	$(filter-out \
		$(notdir $(OPENJ9_ALT_SHARED_LIBRARIES) $(OPENJ9_JAVA_BASE_LIBRARIES) $(OPENJ9_SHARED_CLASSES_LIBRARIES)), \
		$(notdir $(OPENJ9_ALL_LIBRARIES)))

OPENJ9_PROPERTY_FILES := \
	$(notdir $(wildcard $(OUTPUT_ROOT)/vm/java*.properties))

OPENJ9_MISC_FILES := \
	J9TraceFormat.dat \
	OMRTraceFormat.dat \
	options.default \
	#

OPENJ9_NOTICE_FILES := openj9-notices.html
OPENJ9_REDIRECTOR := redirector/$(LIBRARY_PREFIX)jvm_b156$(SHARED_LIBRARY_SUFFIX)

MODULES_LIBS_DIR := $(OUTPUT_ROOT)/support/modules_libs

# openjdk makeflags don't work with openj9/omr native compiles; override with number of CPUs which openj9 and omr need supplied
override MAKEFLAGS := -j $(JOBS)

# honour the --disable-warnings-as-errors configure parameter during compilation of OMR
ifeq (false,$(WARNINGS_AS_ERRORS))
  OMR_EXTRA_CONFIGURE_ARGS := --disable-warnings-as-errors
endif

ifeq (windows,$(OPENJDK_TARGET_OS))
  # set Visual Studio environment
  # wrap PATH in quotes as it contains spaces (unix path)
  # INCLUDE, LIB are already wrapped in quotes (windows paths)
  EXPORT_MSVS_ENV_VARS := PATH="$(PATH)" INCLUDE=$(INCLUDE) LIB=$(LIB)
  # On Windows, the mingw compiler is used for certain files such as
  # the bytecode interpreter.
  # Uncomment the following line to use the default compiler throughout.
  # EXPORT_NO_USE_MINGW := NO_USE_MINGW=true
  # set the output directory for shared libraries
  OPENJ9_LIBS_OUTPUT_DIR := bin
else
  EXPORT_MSVS_ENV_VARS :=
  EXPORT_NO_USE_MINGW :=
  OPENJ9_LIBS_OUTPUT_DIR := lib
endif

.PHONY : \
	build-j9 \
	clean-j9 \
	clean-j9-dist \
	generate-j9jcl-sources \
	run-preprocessors-j9 \
	stage-j9 \
	stage-openj9-tools \
	build-openj9-tools \
	#

# generated_target_rules_build
# ----------------------------
# param 1 = The jdk/jre directory name
# param 2 = The jdk/jre directory to add openj9 content
define generated_target_rules_build

.PHONY : stage_openj9_$1

$(foreach file,$(OPENJ9_ALT_SHARED_LIBRARIES) $(OPENJ9_BUILD_LIBRARIES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/$(OPENJ9_LIBS_OUTPUT_DIR)/$(OPENJ9_LIBS_SUBDIR)/$(notdir $(file)),$(OUTPUT_ROOT)/vm/$(file))))

$(foreach file,$(OPENJ9_MISC_FILES) $(OPENJ9_PROPERTY_FILES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/lib/$(file),$(OUTPUT_ROOT)/vm/$(file))))

$(foreach file,$(OPENJ9_NOTICE_FILES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/$(file),$(SRC_ROOT)/$(file))))

$(foreach file,$(OPENJ9_REDIRECTOR), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/$(OPENJ9_LIBS_OUTPUT_DIR)/j9vm/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX),$(OUTPUT_ROOT)/vm/$(file))))

$(foreach file,$(OPENJ9_JAVA_BASE_LIBRARIES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$(MODULES_LIBS_DIR)/java.base/$(OPENJ9_LIBS_SUBDIR)/$(notdir $(file)),$(OUTPUT_ROOT)/vm/$(file))))

$(foreach file,$(OPENJ9_SHARED_CLASSES_LIBRARIES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$(MODULES_LIBS_DIR)/openj9.sharedclasses/$(OPENJ9_LIBS_SUBDIR)/$(notdir $(file)),$(OUTPUT_ROOT)/vm/$(file))))

$(foreach file,$(OPENJ9_MANAGEMENT_LIBRARIES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$(MODULES_LIBS_DIR)/java.management/$(OPENJ9_LIBS_SUBDIR)/$(notdir $(file)),$(OUTPUT_ROOT)/vm/$(file))))

endef

# generated_target_rules
# ----------------------
# param 1 = The jdk/jre directory name
# param 2 = The jdk/jre directory to add openj9 content
define generated_target_rules

.PHONY : stage_openj9_$1

$(foreach file,$(OPENJ9_SHARED_LIBRARIES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/$(OPENJ9_LIBS_OUTPUT_DIR)/$(OPENJ9_LIBS_SUBDIR)/$(file),$(OUTPUT_ROOT)/vm/$(file))))

$(foreach file,$(OPENJ9_MISC_FILES) $(OPENJ9_PROPERTY_FILES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/lib/$(file),$(OUTPUT_ROOT)/vm/$(file))))

$(foreach file,$(OPENJ9_NOTICE_FILES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/$(file),$(SRC_ROOT)/$(file))))

$(foreach file,$(OPENJ9_REDIRECTOR), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/$(OPENJ9_LIBS_OUTPUT_DIR)/j9vm/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX),$(OUTPUT_ROOT)/vm/$(file))))

ifneq ($(OPENJDK_BUILD_CPU),$(OPENJDK_TARGET_CPU))

# For cross compiles we need some extra libraries defined for use in the generated target rules section.
# These are libraries that would normally be copied as part of the build jdk rules, but that section is currently
# not active during cross compilation. Once we have a working build jdk as part of the build it will probably be possible
# to remove these declarations.

$(foreach file,$(OPENJ9_JAVA_BASE_LIBRARIES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/$(OPENJ9_LIBS_OUTPUT_DIR)/$(OPENJ9_LIBS_SUBDIR)/$(file),$(OUTPUT_ROOT)/vm/$(file))))

$(foreach file,$(OPENJ9_SHARED_CLASSES_LIBRARIES), \
	$(eval $(call openj9_copy_prereq,stage_openj9_$1,$2/$(OPENJ9_LIBS_OUTPUT_DIR)/$(OPENJ9_LIBS_SUBDIR)/$(file),$(OUTPUT_ROOT)/vm/$(file))))

endif # cross compile

endef

# openj9_copy_prereq
# ------------------
# param 1 = The make goal.
# param 2 = The target file to create or update.
# parma 3 = The source file to copy.
define openj9_copy_prereq
$1 : $2
$2 : $3
	@$(MKDIR) -p $$(@D)
	@$(CP) $$< $$@
endef

# openj9_copy_tree
# ----------------
# param 1 = The target directory to create or update.
# param 2 = The source directory to copy.
define openj9_copy_tree
	$(call openj9_copy_tree_impl,$(strip $(abspath $1)),$(strip $(abspath $2)))
endef

OPENJ9_MARKER_FILE := .up-to-date

# Use '-m' / '--touch' to avoid file modification times (`-m` works with older tar tools).
define openj9_copy_tree_impl
	@$(MKDIR) -p $1
	@$(TAR) --create --directory=$2 $(if $(wildcard $1/$(OPENJ9_MARKER_FILE)),--newer=$1/$(OPENJ9_MARKER_FILE)) --exclude-vcs . | $(TAR) --extract --directory=$1 -m
	@$(TOUCH) $1/$(OPENJ9_MARKER_FILE)
endef

# Temporary fix until we work out how to handle the build_jdk for cross compiles
ifeq ($(OPENJDK_BUILD_CPU),$(OPENJDK_TARGET_CPU))
  $(eval $(call generated_target_rules_build,build_jdk,$(BUILD_JDK)))
else
  $(info Cross compilation detected, skipping generated_target_rules_build)
endif
$(eval $(call generated_target_rules,jdk_image,$(JDK_IMAGE_DIR)))
$(eval $(call generated_target_rules,jre_image,$(JRE_IMAGE_DIR)))

# Comments for stage-j9
# Currently there is a staged location where j9 is built.  This is due to a number of reasons:
# 1. make currently leaves output file in current directory
# 2. generated source and header files
# 3. repo layout compared to source.zip layout
# See issue 49 for more information and actions to correct this action.

# Functions to generate sed program fragments.
# $1 - name of flag to be enabled or disabled.
SedDisable = -e '/"$(strip $1)"/s/"true"/"false"/g'
SedEnable  = -e '/"$(strip $1)"/s/"false"/"true"/g'

# Adjust features based on our configuration.
ifeq (true,$(OPENJ9_ENABLE_CUDA))
  FEATURE_SED_SCRIPT := $(call SedEnable,opt_cuda)
else
  FEATURE_SED_SCRIPT := $(call SedDisable,opt_cuda)
endif

# Adjust .spec files replacing references to gcc-4.6. Openjdk requires 4.8.2 or newer.
SPEC_SED_SCRIPT := -e 's/gcc-4.6/gcc/g'

# Adjust DDR enablement flags.
SPEC_SED_SCRIPT += $(call SedDisable,module_ddr)

# Disable windows rebase.
SPEC_SED_SCRIPT += $(call SedDisable,uma_windowsRebase)

# openj9_stage_buildspec_file
# ---------------------------
# param 1 = The simple name of the file to copy.
define openj9_stage_buildspec_file
stage-j9 : $(OUTPUT_ROOT)/vm/buildspecs/$1
$(OUTPUT_ROOT)/vm/buildspecs/$1 : $(OPENJ9_TOPDIR)/buildspecs/$1
	@$(MKDIR) -p $$(@D)
  ifeq (.feature,$(suffix $1))
	@$(SED) $(FEATURE_SED_SCRIPT) < $$< > $$@
  else ifeq (.spec,$(suffix $1))
	@$(SED) $(SPEC_SED_SCRIPT) < $$< > $$@
  else
	@$(CP) $$< $$@
  endif
endef

$(foreach file, \
	$(notdir $(wildcard $(OPENJ9_TOPDIR)/buildspecs/*)), \
	$(eval $(call openj9_stage_buildspec_file,$(file))))

stage-openj9-tools :
	@$(ECHO) Staging OpenJ9 sourcetools in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm/sourcetools,$(OPENJ9_TOPDIR)/sourcetools)

build-openj9-tools : stage-openj9-tools
	@$(ECHO) Building OpenJ9 tools
	($(MAKE) $(MAKEFLAGS) -C $(OUTPUT_ROOT)/vm/sourcetools -f buildj9tools.mk \
		JAVA_HOME=$(BOOT_JDK) lib/jpp.jar \
	)

stage-j9 : stage-openj9-tools
	@$(ECHO) Staging OpenJ9 debugtools in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm/debugtools,$(OPENJ9_TOPDIR)/debugtools)

	@$(ECHO) Staging OpenJ9 jcl in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm/jcl,$(OPENJ9_TOPDIR)/jcl)

	@$(ECHO) Staging OpenJ9 runtime in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm,$(OPENJ9_TOPDIR)/runtime)

	@$(ECHO) Staging OpenJ9 OMR in $(OUTPUT_ROOT)/vm
	$(call openj9_copy_tree,$(OUTPUT_ROOT)/vm/omr,$(OPENJ9OMR_TOPDIR))

OPENJ9_VERSION_VARS := \
	COMPILER_VERSION_STRING \
	HOTSPOT_TARGET_OS \
	OPENJ9_TAG \
	OPENJ9_VERSION_STRING \
	OPENJDK_SHA \
	OPENJDK_TAG \
	OPENJDK_TARGET_CPU_BITS \
	OPENJDK_TARGET_CPU_OSARCH \
	PRODUCT_NAME \
	USERNAME \
	VERSION_STRING \
	#

OPENJ9_VERSION_SCRIPT := \
	$(foreach var,$(OPENJ9_VERSION_VARS),-e 's|@${var}@|$(value $(var))|g')

$(OUTPUT_ROOT)/vm/include/openj9_version_info.h : $(SRC_ROOT)/closed/openj9_version_info.h.in
	@$(MKDIR) -p $(@D)
	@$(SED) $(OPENJ9_VERSION_SCRIPT) > $@ < $<

# update if values change
$(OUTPUT_ROOT)/vm/include/openj9_version_info.h : \
	$(foreach var,$(OPENJ9_VERSION_VARS),$(call DependOnVariable, $(var)))

# Only update version files when the SHAs change.
$(OUTPUT_ROOT)/vm/compiler/jit.version : $(call DependOnVariable, OPENJ9_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define TR_LEVEL_NAME "$(OPENJ9_SHA)"' > $@

$(OUTPUT_ROOT)/vm/omr/OMR_VERSION_STRING : $(call DependOnVariable, OPENJ9OMR_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define OMR_VERSION_STRING "$(OPENJ9OMR_SHA)"' > $@

run-preprocessors-j9 : stage-j9 \
		$(OUTPUT_ROOT)/vm/omr/OMR_VERSION_STRING \
		$(OUTPUT_ROOT)/vm/compiler/jit.version \
		$(OUTPUT_ROOT)/vm/include/openj9_version_info.h
	@$(ECHO) Running OpenJ9 preprocessors with OPENJ9_BUILDSPEC: $(OPENJ9_BUILDSPEC)
	(export BOOT_JDK=$(BOOT_JDK) $(EXPORT_MSVS_ENV_VARS) \
		&& cd $(OUTPUT_ROOT)/vm \
		&& $(MAKE) $(MAKEFLAGS) -f buildtools.mk \
			BUILD_ID=$(BUILD_ID) \
			CMAKE=$(CMAKE) $(if $(findstring true,$(OPENJ9_ENABLE_CMAKE)),ENABLE_CMAKE=true CALLED_BY_SOURCE_ZIP=yes) \
			EXTRA_CONFIGURE_ARGS=$(OMR_EXTRA_CONFIGURE_ARGS) \
			FREEMARKER_JAR="$(FREEMARKER_JAR)" \
			J9VM_SHA=$(OPENJ9_SHA) \
			JAVA_HOME=$(BOOT_JDK) \
			OMR_DIR=$(OUTPUT_ROOT)/vm/omr \
			OPENJ9_BUILD=true \
			SPEC=$(OPENJ9_BUILDSPEC) \
			UMA_OPTIONS_EXTRA="-buildDate $(shell date +'%Y%m%d')" \
			tools \
	)

build-j9 : run-preprocessors-j9
	@$(ECHO) Compiling OpenJ9 in $(OUTPUT_ROOT)/vm
ifeq (true,$(OPENJ9_ENABLE_CMAKE))
	(export OPENJ9_BUILD=true $(EXPORT_MSVS_ENV_VARS) \
		&& cd $(OUTPUT_ROOT)/vm/build \
		&& $(MAKE) $(MAKEFLAGS) install \
	)
else
	(export OPENJ9_BUILD=true $(EXPORT_NO_USE_MINGW) $(EXPORT_MSVS_ENV_VARS) \
		&& cd $(OUTPUT_ROOT)/vm \
		&& $(MAKE) $(MAKEFLAGS) all \
	)
endif
	@$(ECHO) OpenJ9 compile complete

	@$(MKDIR) -p $(MODULES_LIBS_DIR)/java.base
	@$(CP) -p \
		$(addprefix $(OUTPUT_ROOT)/vm/, \
			J9TraceFormat.dat \
			java*.properties \
			OMRTraceFormat.dat \
			options.default) \
		$(MODULES_LIBS_DIR)/java.base/

	# jvm is required for compiling other java.base support natives
	@$(ECHO) "Creating support/modules_libs/java.base/*/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX) from J9 sources"
	@$(MKDIR) -p $(MODULES_LIBS_DIR)/java.base/j9vm
	@$(CP) -p $(OUTPUT_ROOT)/vm/redirector/$(LIBRARY_PREFIX)jvm_b156$(SHARED_LIBRARY_SUFFIX) $(MODULES_LIBS_DIR)/java.base/j9vm/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX)
	@$(MKDIR) -p $(MODULES_LIBS_DIR)/java.base/server
	@$(CP) -p $(OUTPUT_ROOT)/vm/redirector/$(LIBRARY_PREFIX)jvm_b156$(SHARED_LIBRARY_SUFFIX) $(MODULES_LIBS_DIR)/java.base/server/$(LIBRARY_PREFIX)jvm$(SHARED_LIBRARY_SUFFIX)

J9JCL_SOURCES_DONEFILE := $(MAKESUPPORT_OUTPUTDIR)/j9jcl_sources.done

recur_wildcard = $(foreach dir,$(wildcard $1/*),$(call recur_wildcard,$(dir),$2) $(filter $(subst *,%,$2),$(dir)))
AllJclSource   = $(call recur_wildcard,$(OPENJ9_TOPDIR)/jcl/src,*.java)

JPP_BASE_DIR := $(call FixPath,$(OPENJ9_TOPDIR))
JPP_DEST     := $(call FixPath,$(SUPPORT_OUTPUTDIR)/j9jcl_sources)
JPP_JAR      := $(call FixPath,$(OUTPUT_ROOT)/vm/sourcetools/lib/jpp.jar)

$(J9JCL_SOURCES_DONEFILE) : $(AllJclSource)
	@$(ECHO) Generating J9JCL sources
	@$(MKDIR) -p $(SUPPORT_OUTPUTDIR)/j9jcl_sources
	@$(BOOT_JDK)/bin/java \
		-cp "$(JPP_JAR)" \
		-Dfile.encoding=US-ASCII \
		com.ibm.jpp.commandline.CommandlineBuilder \
			-verdict \
			-baseDir "$(JPP_BASE_DIR)/" \
			-config SIDECAR19-SE-B175 \
			-srcRoot jcl/ \
			-xml jpp_configuration.xml \
			-dest "$(JPP_DEST)" \
			-macro:define "com.ibm.oti.vm.library.version=29" \
			-tag:define "PLATFORM-$(OPENJ9_PLATFORM_CODE)"
	@$(MKDIR) -p $(@D)
	@$(TOUCH) $@

generate-j9jcl-sources : $(J9JCL_SOURCES_DONEFILE)

clean-j9 : clean-openj9-thirdparty-binaries
	(cd $(OUTPUT_ROOT)/vm && $(MAKE) clean)

clean-j9-dist : clean-openj9-thirdparty-binaries
	$(RM) -fdr $(OUTPUT_ROOT)/vm

clean-openj9-thirdparty-binaries :
	$(RM) -f $(OPENJ9_STAGED_THIRDPARTY_BINARIES) $(patsubst %.jar,%.tar.gz,$(OPENJ9_STAGED_THIRDPARTY_BINARIES))
